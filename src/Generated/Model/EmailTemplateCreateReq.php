<?php
/**
 * EmailTemplateCreateReq
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Corbado\Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corbado API
 *
 * # Introduction The Corbado API is documented in **OpenAPI format** and provides an overview of all Corbado API calls to implement passwordless authentication with Passkeys (Biometrics).  # Authentication To authenticate your API requests HTTP Basic Auth is used.  You need to set the projectID as username and the API secret as password. The authorization header look as follows:  `Basic <<projectID>:<API secret>>`  The **authorization header** needs to be **Base64 encrypted** to be working. If the authorization header is missing or incorrect, the API will respond with 401.  ## basicAuth **Security Scheme Type:** HTTP  **HTTP Authorization Scheme:** `basic`   ## projectID **Security Scheme Type:** API Key  **Header parameter name:** `x-Corbado-ProjectID`  # Security and privacy Corbado services are designed, developed, monitored, and updated with security at our core to protect you and your customers’ data and privacy.  ## Security  ### Infrastructure security Corbado leverages highly available and secure cloud infrastructure to ensure that our services are always available and securely delivered. Corbado's services are operated in uvensyse GmbH's data centers in Germany and comply with ISO standard 27001. All data centers have redundant power and internet connections to avoid failure. The main location of the servers used is in Linden and offers 24/7 support. We do not use any AWS, GCP or Azure services.  Each server is monitored 24/7 and in the event of problems, automated information is sent via SMS and e-mail. The monitoring is done by the external service provider Serverguard24 GmbH.   All Corbado hardware and networking is routinely updated and audited to ensure systems are secure and that least privileged access is followed. Additionally we implement robust logging and audit protocols that allow us high visibility into system use.  ### Responsible disclosure program Here at Corbado, we take the security of our user’s data and of our services seriously. As such, we encourage responsible security research on Corbado services and products. If you believe you’ve discovered a potential vulnerability, please let us know by emailing us at [security@corbado.com](mailto:security@corbado.com). We will acknowledge your email within 2 business days. As public disclosures of a security vulnerability could put the entire Corbado community at risk, we ask that you keep such potential vulnerabilities confidential until we are able to address them. We aim to resolve critical issues within 30 days of disclosure. Please make a good faith effort to avoid violating privacy, destroying data, or interrupting or degrading the Corbado service. Please only interact with accounts you own or for which you have explicit permission from the account holder. While researching, please refrain from:  - Distributed Denial of Service (DDoS) - Spamming - Social engineering or phishing of Corbado employees or contractors - Any attacks against Corbado's physical property or data centers  Thank you for helping to keep Corbado and our users safe!  ### Rate limiting At Corbado, we apply rate limit policies on our APIs in order to protect your application and user management infrastructure, so your users will have a frictionless non-interrupted experience.  Corbado responds with HTTP status code 429 (too many requests) when the rate limits exceed. Your code logic should be able to handle such cases by checking the status code on the response and recovering from such cases. If a retry is needed, it is best to allow for a back-off to avoid going into an infinite retry loop.  The current rate limit for all our API endpoints is **max. 100 requests per 10 seconds**.  ## Privacy Corbado is committed to protecting the personal data of our customers and their customers. Corbado has in place appropriate data security measures that meet industry standards. We regularly review and make enhancements to our processes, products, documentation, and contracts to help support ours and our customers’ compliance for the processing of personal data.  We try to minimize the usage and processing of personally identifiable information. Therefore, all our services are constructed to avoid unnecessary data consumption.  To make our services work, we only require the following data: - any kind of identifier (e.g. UUID, phone number, email address) - IP address (only temporarily for rate limiting aspects) - User agent (for device management)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Corbado\Generated\Model;

use \ArrayAccess;
use \Corbado\Generated\ObjectSerializer;

/**
 * EmailTemplateCreateReq Class Doc Comment
 *
 * @category Class
 * @package  Corbado\Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EmailTemplateCreateReq implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'emailTemplateCreateReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'subject' => 'string',
        'plain_text_body' => 'string',
        'html_text_title' => 'string',
        'html_text_body' => 'string',
        'html_text_button' => 'string',
        'html_color_font' => 'string',
        'html_color_background_outer' => 'string',
        'html_color_background_inner' => 'string',
        'html_color_button' => 'string',
        'html_color_button_font' => 'string',
        'is_default' => 'bool',
        'request_id' => 'string',
        'client_info' => '\Corbado\Generated\Model\ClientInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'subject' => null,
        'plain_text_body' => null,
        'html_text_title' => null,
        'html_text_body' => null,
        'html_text_button' => null,
        'html_color_font' => null,
        'html_color_background_outer' => null,
        'html_color_background_inner' => null,
        'html_color_button' => null,
        'html_color_button_font' => null,
        'is_default' => null,
        'request_id' => null,
        'client_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'subject' => 'subject',
        'plain_text_body' => 'plainTextBody',
        'html_text_title' => 'htmlTextTitle',
        'html_text_body' => 'htmlTextBody',
        'html_text_button' => 'htmlTextButton',
        'html_color_font' => 'htmlColorFont',
        'html_color_background_outer' => 'htmlColorBackgroundOuter',
        'html_color_background_inner' => 'htmlColorBackgroundInner',
        'html_color_button' => 'htmlColorButton',
        'html_color_button_font' => 'htmlColorButtonFont',
        'is_default' => 'isDefault',
        'request_id' => 'requestID',
        'client_info' => 'clientInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'subject' => 'setSubject',
        'plain_text_body' => 'setPlainTextBody',
        'html_text_title' => 'setHtmlTextTitle',
        'html_text_body' => 'setHtmlTextBody',
        'html_text_button' => 'setHtmlTextButton',
        'html_color_font' => 'setHtmlColorFont',
        'html_color_background_outer' => 'setHtmlColorBackgroundOuter',
        'html_color_background_inner' => 'setHtmlColorBackgroundInner',
        'html_color_button' => 'setHtmlColorButton',
        'html_color_button_font' => 'setHtmlColorButtonFont',
        'is_default' => 'setIsDefault',
        'request_id' => 'setRequestId',
        'client_info' => 'setClientInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'subject' => 'getSubject',
        'plain_text_body' => 'getPlainTextBody',
        'html_text_title' => 'getHtmlTextTitle',
        'html_text_body' => 'getHtmlTextBody',
        'html_text_button' => 'getHtmlTextButton',
        'html_color_font' => 'getHtmlColorFont',
        'html_color_background_outer' => 'getHtmlColorBackgroundOuter',
        'html_color_background_inner' => 'getHtmlColorBackgroundInner',
        'html_color_button' => 'getHtmlColorButton',
        'html_color_button_font' => 'getHtmlColorButtonFont',
        'is_default' => 'getIsDefault',
        'request_id' => 'getRequestId',
        'client_info' => 'getClientInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_EMAIL_LINK = 'email_link';
    const TYPE_LOGIN_NOTIFICATION = 'login_notification';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EMAIL_LINK,
            self::TYPE_LOGIN_NOTIFICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['plain_text_body'] = $data['plain_text_body'] ?? null;
        $this->container['html_text_title'] = $data['html_text_title'] ?? null;
        $this->container['html_text_body'] = $data['html_text_body'] ?? null;
        $this->container['html_text_button'] = $data['html_text_button'] ?? null;
        $this->container['html_color_font'] = $data['html_color_font'] ?? null;
        $this->container['html_color_background_outer'] = $data['html_color_background_outer'] ?? null;
        $this->container['html_color_background_inner'] = $data['html_color_background_inner'] ?? null;
        $this->container['html_color_button'] = $data['html_color_button'] ?? null;
        $this->container['html_color_button_font'] = $data['html_color_button_font'] ?? null;
        $this->container['is_default'] = $data['is_default'] ?? null;
        $this->container['request_id'] = $data['request_id'] ?? null;
        $this->container['client_info'] = $data['client_info'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['plain_text_body'] === null) {
            $invalidProperties[] = "'plain_text_body' can't be null";
        }
        if ($this->container['html_text_title'] === null) {
            $invalidProperties[] = "'html_text_title' can't be null";
        }
        if ($this->container['html_text_body'] === null) {
            $invalidProperties[] = "'html_text_body' can't be null";
        }
        if ($this->container['html_text_button'] === null) {
            $invalidProperties[] = "'html_text_button' can't be null";
        }
        if ($this->container['html_color_font'] === null) {
            $invalidProperties[] = "'html_color_font' can't be null";
        }
        if ($this->container['html_color_background_outer'] === null) {
            $invalidProperties[] = "'html_color_background_outer' can't be null";
        }
        if ($this->container['html_color_background_inner'] === null) {
            $invalidProperties[] = "'html_color_background_inner' can't be null";
        }
        if ($this->container['html_color_button'] === null) {
            $invalidProperties[] = "'html_color_button' can't be null";
        }
        if ($this->container['html_color_button_font'] === null) {
            $invalidProperties[] = "'html_color_button_font' can't be null";
        }
        if ($this->container['is_default'] === null) {
            $invalidProperties[] = "'is_default' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets plain_text_body
     *
     * @return string
     */
    public function getPlainTextBody()
    {
        return $this->container['plain_text_body'];
    }

    /**
     * Sets plain_text_body
     *
     * @param string $plain_text_body plain_text_body
     *
     * @return self
     */
    public function setPlainTextBody($plain_text_body)
    {
        $this->container['plain_text_body'] = $plain_text_body;

        return $this;
    }

    /**
     * Gets html_text_title
     *
     * @return string
     */
    public function getHtmlTextTitle()
    {
        return $this->container['html_text_title'];
    }

    /**
     * Sets html_text_title
     *
     * @param string $html_text_title html_text_title
     *
     * @return self
     */
    public function setHtmlTextTitle($html_text_title)
    {
        $this->container['html_text_title'] = $html_text_title;

        return $this;
    }

    /**
     * Gets html_text_body
     *
     * @return string
     */
    public function getHtmlTextBody()
    {
        return $this->container['html_text_body'];
    }

    /**
     * Sets html_text_body
     *
     * @param string $html_text_body html_text_body
     *
     * @return self
     */
    public function setHtmlTextBody($html_text_body)
    {
        $this->container['html_text_body'] = $html_text_body;

        return $this;
    }

    /**
     * Gets html_text_button
     *
     * @return string
     */
    public function getHtmlTextButton()
    {
        return $this->container['html_text_button'];
    }

    /**
     * Sets html_text_button
     *
     * @param string $html_text_button html_text_button
     *
     * @return self
     */
    public function setHtmlTextButton($html_text_button)
    {
        $this->container['html_text_button'] = $html_text_button;

        return $this;
    }

    /**
     * Gets html_color_font
     *
     * @return string
     */
    public function getHtmlColorFont()
    {
        return $this->container['html_color_font'];
    }

    /**
     * Sets html_color_font
     *
     * @param string $html_color_font html_color_font
     *
     * @return self
     */
    public function setHtmlColorFont($html_color_font)
    {
        $this->container['html_color_font'] = $html_color_font;

        return $this;
    }

    /**
     * Gets html_color_background_outer
     *
     * @return string
     */
    public function getHtmlColorBackgroundOuter()
    {
        return $this->container['html_color_background_outer'];
    }

    /**
     * Sets html_color_background_outer
     *
     * @param string $html_color_background_outer html_color_background_outer
     *
     * @return self
     */
    public function setHtmlColorBackgroundOuter($html_color_background_outer)
    {
        $this->container['html_color_background_outer'] = $html_color_background_outer;

        return $this;
    }

    /**
     * Gets html_color_background_inner
     *
     * @return string
     */
    public function getHtmlColorBackgroundInner()
    {
        return $this->container['html_color_background_inner'];
    }

    /**
     * Sets html_color_background_inner
     *
     * @param string $html_color_background_inner html_color_background_inner
     *
     * @return self
     */
    public function setHtmlColorBackgroundInner($html_color_background_inner)
    {
        $this->container['html_color_background_inner'] = $html_color_background_inner;

        return $this;
    }

    /**
     * Gets html_color_button
     *
     * @return string
     */
    public function getHtmlColorButton()
    {
        return $this->container['html_color_button'];
    }

    /**
     * Sets html_color_button
     *
     * @param string $html_color_button html_color_button
     *
     * @return self
     */
    public function setHtmlColorButton($html_color_button)
    {
        $this->container['html_color_button'] = $html_color_button;

        return $this;
    }

    /**
     * Gets html_color_button_font
     *
     * @return string
     */
    public function getHtmlColorButtonFont()
    {
        return $this->container['html_color_button_font'];
    }

    /**
     * Sets html_color_button_font
     *
     * @param string $html_color_button_font html_color_button_font
     *
     * @return self
     */
    public function setHtmlColorButtonFont($html_color_button_font)
    {
        $this->container['html_color_button_font'] = $html_color_button_font;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \Corbado\Generated\Model\ClientInfo|null
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \Corbado\Generated\Model\ClientInfo|null $client_info client_info
     *
     * @return self
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


